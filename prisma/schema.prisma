generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Enums ---

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CourseType {
  VIDEO
  LIVE
}

enum ResourceType {
  VIDEO
  AUDIO_EXERCISE
}

enum AuditEventType {
  LIVE_SCHEDULED
  LIVE_UPDATED
  LIVE_CANCELLED
  RECORDING_UPLOADED
  EXERCISE_ADDED
  SUBMISSION_GRADED
  ENROLLMENT_ACTIVATED
}

enum PaymentStatus {
  AWAITING_PAYMENT_PROOF
  PROOF_SUBMITTED
  COMPLETED
  REJECTED
  REFUNDED
  ERROR
}

enum EnrollmentStatus {
  PENDING_PAYMENT_CONFIRMATION // User has initiated enrollment, pending admin approval
  ACTIVE
  CANCELLED
  COMPLETED
}

enum PostStatus {
  DRAFT
  PUBLISHED
}



enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// --- Models ---

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  enrollments            Enrollment[]
  taughtCourses          Course[]        @relation("TeacherCourses")
  submissions            Submission[]    @relation("StudentSubmissions")
  gradedSubmissions      Submission[]    @relation("GradedSubmissions")
  payments               Payment[]
  reviewedPayments       Payment[]       @relation("ReviewedPayments")
  createdAnnouncements   Announcement[]  @relation("CreatedAnnouncements")
  authoredBlogPosts      BlogPost[]      @relation("AuthoredBlogPosts")
  lessonCompletions      UserLessonCompletion[]
  lessonComments         LessonComment[]
  errorReports           ErrorReport[]
  auditEvents            AuditEvent[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?      @db.Text
  price         Float        @default(0.0)
  status        CourseStatus @default(DRAFT)
  type          CourseType
  coverImageUrl String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  teacher   User?   @relation("TeacherCourses", fields: [teacherId], references: [id], onDelete: SetNull)
  teacherId String?

  enrollments    Enrollment[]
  resources      Resource[]
  courseSessions CourseSession[]
  announcements  Announcement[] @relation("CourseAnnouncements")
  payments       Payment[]
  auditEvents    AuditEvent[]

  @@index([teacherId])
}

model Enrollment {
  id             Int              @id @default(autoincrement())
  paid           Boolean          @default(false)
  status         EnrollmentStatus @default(PENDING_PAYMENT_CONFIRMATION)
  progress       Float            @default(0.0)
  grade          Float?
  enrolledAt     DateTime         @default(now())
  activatedAt    DateTime?
  completedAt    DateTime?
  lastAccessedAt DateTime?

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int

  submissions       Submission[]
  payment           Payment?
  lessonCompletions UserLessonCompletion[]

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([userId])
}

model UserLessonCompletion {
  id           Int      @id @default(autoincrement())
  userId       String
  lessonId     Int
  enrollmentId Int
  completedAt  DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Resource   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId, enrollmentId])
  @@index([userId])
  @@index([lessonId])
  @@index([enrollmentId])
}

model Resource {
  id          Int          @id @default(autoincrement())
  title       String
  type        ResourceType
  url         String
  content     String?      @db.Text
  week        Int?
  order       Int?
  releaseDate DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int

  lessonCompletions UserLessonCompletion[]
  lessonComments    LessonComment[]
  errorReports      ErrorReport[]
  submissions       Submission[]

  attachments      ResourceAttachment[]

  @@index([courseId])
}

model ResourceAttachment {
  id         Int      @id @default(autoincrement())
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId Int
  fileUrl    String
  mimeType   String
  filename   String
  createdAt  DateTime @default(now())
  submissions Submission[]

  @@index([resourceId])
}

model CourseSession {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?   @db.Text
  meetingLink  String
  startTime    DateTime
  endTime      DateTime?
  recordingUrl String?
  week         Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int

  @@index([courseId])
}

model Submission {
  id           Int       @id @default(autoincrement())
  fileUrl      String?
  audioUrl     String?
  textAnswer   String?   @db.Text
  grade        Float?
  feedback     String?   @db.Text
  status       String    @default("PENDING_REVIEW")
  submittedAt  DateTime  @default(now())
  gradedAt     DateTime?

  resource     Resource? @relation(fields: [resourceId], references: [id], onDelete: SetNull)
  resourceId   Int?

  resourceAttachment   ResourceAttachment? @relation(fields: [resourceAttachmentId], references: [id], onDelete: SetNull)
  resourceAttachmentId Int?

  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId Int

  student   User   @relation("StudentSubmissions", fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  grader   User?  @relation("GradedSubmissions", fields: [graderId], references: [id], onDelete: SetNull)
  graderId String?

  @@index([enrollmentId])
  @@index([studentId])
  @@index([graderId])
  @@index([resourceId])
  @@index([resourceAttachmentId])
  @@unique([resourceAttachmentId, enrollmentId, studentId])
}

model Payment {
  id                 Int           @id @default(autoincrement())
  paymentReferenceId String        @unique
  amount             Float
  currency           String        @default("USD")
  status             PaymentStatus @default(AWAITING_PAYMENT_PROOF)
  proofImageUrl      String?
  provider           String?
  providerPaymentId  String?
  adminNotes         String?       @db.Text
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  reviewedAt         DateTime?
  reviewedById       String?
  reviewedBy         User?         @relation("ReviewedPayments", fields: [reviewedById], references: [id], onDelete: SetNull)

  user     User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId   String

  course   Course @relation(fields: [courseId], references: [id], onDelete: NoAction)
  courseId Int

  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  enrollmentId Int        @unique

  @@index([userId])
  @@index([courseId])
  @@index([reviewedById])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  isGlobal  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User?   @relation("CreatedAnnouncements", fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?

  course   Course? @relation("CourseAnnouncements", fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int?

  @@index([authorId])
  @@index([courseId])
}

model BlogPost {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique
  content     String     @db.Text
  excerpt     String?    @db.Text
  imageUrl    String?
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  author   User?   @relation("AuthoredBlogPosts", fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?

  @@index([authorId])
}



model LessonComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessonId  Int
  lesson    Resource @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  parentId  Int?
  parent    LessonComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   LessonComment[] @relation("Replies")

  @@index([userId])
  @@index([lessonId])
  @@index([parentId])
}

model ErrorReport {
  id          Int          @id @default(autoincrement())
  description String       @db.Text
  status      ReportStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId Int
  lesson   Resource @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lessonId])
}

model AuditEvent {
  id           Int            @id @default(autoincrement())
  type         AuditEventType
  title        String
  occurredAt   DateTime       @default(now())
  createdAt    DateTime       @default(now())

  course       Course?        @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId     Int?

  actor        User?          @relation(fields: [actorUserId], references: [id], onDelete: SetNull)
  actorUserId  String?

  @@index([courseId])
  @@index([occurredAt])
}
